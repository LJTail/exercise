#include <winsock2.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#pragma comment(lib, "WS2_32.lib") 

#define MAXLINE 4096
#define BUFFER_SIZE 1024

int main()
{
//初始化WSAStartup
	WORD    wVersionRequested;
	WSADATA wsaData;
	int     err, iLen;
	SOCKET sockSrv;
	wVersionRequested = MAKEWORD(2, 2);

	char filename[100];
	char filepath[100];

	char *buffer;//file buffer
	int fileTrans;
	int lenfilepath;
	FILE *fp;
	int writelength;

	buffer = (char *)malloc(sizeof(char)*BUFFER_SIZE);
	//bzero(buffer,BUFFER_SIZE);
	memset(buffer, 0, sizeof(buffer));

	if (WSAStartup(wVersionRequested, &wsaData) != 0)
	{
		printf("WSAStartup error!\n");
		return -1;
	}

	if ((sockSrv = socket(AF_INET, SOCK_STREAM, 0))<0) {//建立套接字，类型IPV4，TCP协议
		printf("socket error!\n");
		return -2;
	}
	SOCKADDR_IN addrSrv;
	addrSrv.sin_family = AF_INET;//TCP/IP协议
	addrSrv.sin_addr.s_addr = htonl(INADDR_ANY);//将16位端口号字符顺序转换成网络字符顺序
	addrSrv.sin_port = htons(9000);//将16位端口号字符顺序转换成网络字符顺序

	if (bind(sockSrv, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR)) != 0)//socket与地址捆绑并判断是否成功
	{
		printf("bind error!\n");
		return -3;
	}

	if (listen(sockSrv, 5) != 0)//使用listen监听
	{

		printf("listen error!\n");
		return -4;
	}
	printf("Sever build finished ...\n");

	while (1)
	{
		SOCKET temp;
		if ((temp = accept(sockSrv, (SOCKADDR*)NULL, NULL))>0)//accept接受连接请求，返回一个新的socket给temp
		{
			memset(filename, '\0', sizeof(filename));//初始化文件名
			memset(filepath, '\0', sizeof(filepath));//初始化路径
			lenfilepath = recv(temp, filepath, 100, 0);//接收从客户端经temp传来的数据
			printf("filepath :%s\n", filepath);
			if (lenfilepath<0)
			{
				printf("recv error!\n");
			}
			else
			{
				int i = 0, k = 0;
				for (i = strlen(filepath); i >= 0; i--)
				{
					if (filepath[i] != '/')
					{
						k++;
					}
					else
						break;
				}
				strcpy(filename, filepath + (strlen(filepath) - k) + 1);//将接收到的数据拷贝到filename
			}
			printf("filename :%s\n", filename);
			fp = fopen(filename, "w");//打开文件进行写操作
			if (fp != NULL)
			{
				while (fileTrans = recv(temp, buffer, BUFFER_SIZE, 0))//接收从客户端经temp传来的数据存入缓冲区
				{
					if (fileTrans<0)
					{
						printf("recv error!\n");
						break;
					}
					writelength = fwrite(buffer, sizeof(char), fileTrans, fp);//将缓冲区内容写入，并记录写入内容以便后续判断
					if (writelength <fileTrans)
					{
						printf("write error!\n");
						break;
					}
					//bzero(buffer,BUFFER_SIZE);
					memset(buffer, '\0', sizeof(buffer));
				}
				printf("recv finished!\n");
				fclose(fp);
			}
			else
			{
				printf("filename is null!\n");

			}
			closesocket(temp);


		}
		else
		{
			printf("accept error!\n");
			closesocket(temp);
		}
	}
	closesocket(sockSrv);
	WSACleanup();
	return 0;

}
