#include<stdio.h>  
#include<sys/socket.h>  
#include<netinet/in.h>  
#include<stdlib.h>  
#include<memory.h>  
#include<string.h>  
#include<sys/socket.h>  
#include <arpa/inet.h>
#include <unistd.h>
  
#define PORT 8888  
int main(){  
    int sock,new_sock;  
    struct sockaddr_in my_addr,client_addr;  
    socklen_t len;  
    char buf[100];  
  //建立socket
    if((sock=socket(AF_INET,SOCK_STREAM,0))<0){  //初始化socket，地址类型ipv4，TCP协议
        printf("socket create error!\n");  //若初始化失败则输出该语句
        exit(1);  
    }  
    memset(&my_addr,0,sizeof(my_addr));  //从my_mddr指针所指的地址开始将my_addr字节置0
    my_addr.sin_family=AF_INET;  //TCP/IP协议
    my_addr.sin_port=htons(PORT);  //将16位端口号字符顺序转换成网络字符顺序
    my_addr.sin_addr.s_addr=INADDR_ANY;  //将字符串的IP地址转化为网络字符顺序
  
    if(bind(sock,(struct sockaddr*)&my_addr,sizeof(my_addr))==-1){  //绑定socket与地址捆绑
        printf("bind error!\n");  //若绑定失败则输出该语句
        exit(1);  
    }  
    if(listen(sock,5)<0){ // 使用listen监听
        printf("listen error!\n");  
        exit(1);  
    }  
    len=sizeof(struct sockaddr);  
new_sock=accept(sock,(struct sockaddr*)&client_addr,&len);//accept接受连接请求，返回一个新的socket
    if(new_sock < 0){  
        printf("accept error!\n");  
        exit(1);  
    }
    else{  
        printf("server: get connection from %s,port %d socket %d \n",inet_ntoa(client_addr.sin_addr),ntohs(client_addr.sin_port),new_sock);  
  
    }  
    while(1){  
        memset(buf,0,100);  //初始化缓冲区
        printf("Input message to send: ");  
        fgets(buf,100,stdin);  //将内容读入缓冲区
        if(!strncasecmp(buf,"quit",4)){  
            printf("server is closing...\n");  
            break;  
        }  
        len=send(new_sock,buf,strlen(buf)-1,0);  //将buf的数据从new_sock传给客户端
        if(len<0){  
            printf("send error!\n");  
            exit(1);  
        }else{  
            printf("send succeed! send : %s\n",buf);  
        }  
        printf("------------------------------\n");  
        memset(buf,0,100);  
        len=recv(new_sock,buf,100,0); //接收从客户端经new_sock传来的数据 
        if(len<0){  
            printf("recv error!\n");  
            exit(1);  
        }else if(len == 0){  
            printf("the client quit!\n");  
            break;  
        }else{  
            printf("receive message: %s \n",buf);  
        }  
    }  
    close(sock);  
    close(new_sock);  
} 
